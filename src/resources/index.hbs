---
layout: default.hbs
---
<script src="https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js"></script>
      <div id="contentContainer">
      </div>

        <template id="listing-page">
          <section class="nsw-section nsw-section--off-white nsw-p-top-lg nsw-p-bottom-lg">
            <div class="nsw-container">
              <h2>Methods</h2>
              <div class="nsw-layout">
                <div class="nsw-layout__main">
                  <p class="nsw-intro">A library of methods, playbooks, and templates organised by practice, type, and topic.</p>
                </div>
                <div class="nsw-layout__sidebar nsw-layout__sidebar--desktop"></div>
              </div>
            </div>
          </section>
          <div class="nsw-container">
            <div class="nsw-layout">
              <div class="nsw-layout__sidebar">
                <div class="nsw-filters nsw-filters--fixed js-filters">
                  <div class="nsw-filters__controls active">
                    <button>
                      <span class="material-icons nsw-material-icons" focusable="false" aria-hidden="true">tune</span>
                      <span>Filter results</span>
                    </button>
                  </div>
                  <div class="nsw-filters__wrapper">
                    <div class="nsw-filters__back">
                      <button class="nsw-icon-button nsw-icon-button--flex js-close-sub-nav" type="button" aria-expanded="true" aria-controls="sub-nav-">
                        <span class="material-icons nsw-material-icons" focusable="false" aria-hidden="true">keyboard_arrow_left</span>
                        <span id="mobile-show">Show results</span>
                      </button>
                    </div>
                    <div class="nsw-filters__title">Filter results</div>
                    <div class="nsw-filters__list">
                      <div class="nsw-filters__item">
                        <div class="nsw-form__input-group nsw-form__input-group--icon nsw-form__input-group--large">
                          <label class="sr-only" for="form-input-group-icon-1">Search</label>
                          <input class="nsw-form__input" type="text" id="filters-all-keyword" name="filters-all-keyword" value="">
                          <button class="nsw-button nsw-button--dark nsw-button--flex" id="keywordSubmit" type="button"><span class="material-icons nsw-material-icons nsw-text--light" focusable="false" aria-hidden="true">search</span></button>
                        </div>

                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <main class="nsw-layout__main">
                <div class="nsw-results-bar">
                  <div class="nsw-results-bar__info"></div>
                </div>
                <div class="nsw-search-results">
                  <div id="guides"></div>
                </div>
              </main>
            </div>
          </div>
        </template>
        <template id="content-page">
          <section class="nsw-section nsw-section--off-white nsw-p-top-lg nsw-p-bottom-lg">
            <div class="nsw-container">
              <div class="nsw-layout">
                <div class="nsw-layout__main" id="article-content">

                </div>
                <div class="nsw-layout__sidebar nsw-layout__sidebar--desktop">
                  {{>wiki-message}}
                </div>
              </div>
            </div>
          </section>
        </template>
        <template id="list-item">
          <div class="nsw-list-item">
            <div class="nsw-list-item__content">
              <div class="nsw-list-item__label"></div>
              <div class="nsw-list-item__title"><a href="#"></a></div>
              <div class="nsw-list-item__copy"></div>
              <div class="nsw-list-item__tags">
                <div class="nsw-list nsw-list--8">
                </div>
              </div>
            </div>
          </div>
        </template>

      <script>

      const pagePath = "/resources/";
      const router = new Navigo('/', { hash: true });

      window.addEventListener("load", () => {
        router.on("/:id/:name", (match) => {
          unload();
          articlePage(match.data.id);
          window.NSW.initSite()
        })

        .on('/', (match) => {
          unload();
          listingPage();
          window.NSW.initSite()
        })

        .on(pagePath, (match) => {
          unload();
          router.navigate('/');
        })

        .resolve();
      });

      const articleTemplate = document.getElementById('content-page');
      const listingTemplate = document.getElementById('listing-page');
      const listItemTemplate = document.getElementById('list-item');
      const pageContainer = document.getElementById("contentContainer");
      const filtersContainer = ".nsw-filters__list";
      const articleBodyId = 'article-content';
      const tagQuerySelector = ".nsw-tag--checkbox input";
      const keywordsInputId = "filters-all-keyword";
      const listWrapperId = "guides";

      const strapiURL = 'https://nsw-design-system-guides.herokuapp.com';

      var currentDataset;

      function listingPage() {

        const clone = listingTemplate.content.cloneNode(true);
        pageContainer.appendChild(clone);

        const keywords = document.getElementById(keywordsInputId);
        if(keywords.value.length==0){
            var searchParams = new URLSearchParams(window.location.search);
            keywords.value = searchParams.get('q');
        }

        function populate(searchStr){
          renderItems(totalDataset);
        }

        fetch(`${strapiURL}/tag-types`).then(function (response) {
          return response.json();
        }).then(function (data) {
          let tagPropPromise = new Promise(function(resolve, reject) {
            renderTags(data, filtersContainer)
            resolve(); // when successful
            reject();  // when error
          });
          tagPropPromise.then(
            function(value) {
              fetch(`${strapiURL}/guides`).then(function (response) {
                return response.json();
              }).then(function (data) {
                window.totalDataset = data;
                currentDataset = data;
                populate();
              }).catch(function (err) {
                console.warn('Something went wrong getting guides.', err);
              });
            },
            function(error) { /* code if some error */ }
          )
        }).catch(function (err) {
          console.warn('Something went wrong adding checkboxes.', err);
        });

        document.querySelector(".nsw-filters__list").addEventListener('click', function(e) {
        	if(e.target.type == 'checkbox') {
            const filteredTags = getActiveTags();
            const startingData = filterResourcesByKeyword(window.totalDataset,keywords.value)
            const filterDataset = filterResourcesByTag(startingData,filteredTags);
            rePopulate(filterDataset);
        	}
        });

        // If it's a local link (identified by dataset.internal override browser behaviour)
        document.getElementById(listWrapperId).addEventListener('click', function(e) {
        	if(e.target.dataset.internal) {
            navigate(e.target.dataset.internal);
            return false;
        	}
        });

        document.getElementById('keywordSubmit').addEventListener('click', function(e) {
          const filteredDataset = filterResourcesByTag(currentDataset,getActiveTags());
          const searched = filterResourcesByKeyword(filteredDataset,keywords.value);
          rePopulate(searched)
        });

        keywords.addEventListener('keypress', function(e) {
          if (e.key === 'Enter') {
            const filteredDataset = filterResourcesByTag(currentDataset,getActiveTags());
            const searched = filterResourcesByKeyword(filteredDataset,e.target.value);
            rePopulate(searched)
          }
        });

        // keywords.addEventListener('keyup', function(e) {
        //   const filteredDataset = filterResourcesByTag(currentDataset,getActiveTags());
        //   const searched = filterResourcesByKeyword(filteredDataset,e.target.value);
        //   rePopulate(searched)
        // });
      };

      function getActiveTags(){
        let filteredTags = {};
        let tagGroups = document.querySelectorAll('[data-taggroup]');
        tagGroups.forEach((group) => {
          filteredTags[group.dataset.taggroup] = []
          inputs = group.querySelectorAll('input');
          inputs = Array.from(inputs)

          inputs.forEach((tag, i) => {
            tagId = tag.dataset.id;
            if(!filteredTags[group.dataset.taggroup][tag.dataset.id.toString()]){
              filteredTags[group.dataset.taggroup][tag.dataset.id.toString()] = [];
            }
            filteredTags[group.dataset.taggroup][tag.dataset.id.toString()]['checked']=false;
            filteredTags[group.dataset.taggroup][tag.dataset.id.toString()]['id']=tagId;
          });

          if (inputs.filter(i => i.checked==true).length){
            inputs.filter(i => i.checked==true).forEach(filteredTag => {
              filteredTags[group.dataset.taggroup][filteredTag.dataset.id.toString()]['checked']=true;
              filteredTags[group.dataset.taggroup][filteredTag.dataset.id.toString()]['id']=filteredTag.dataset.id;
            });

          } else {
            inputs.forEach(filteredTag => {
              //filteredTags[group.dataset.id].push(filteredTag.dataset.id);
            });
          }

        });
        return filteredTags;
      }

      function filterResourcesByTag(dataIn,tags){
        let startingData = dataIn.map(a => {return {...a}})
        let filteredData=[];
        let checkedCategories=[]

        for (const [groupKey, groupValue] of Object.entries(tags)) {//loop tag groups array
          if((tags[groupKey].filter(t => t.checked==true)).length){ // if anything is checked in a group...
            checkedCategories.push(groupKey);
          }
        }

        if(checkedCategories.length===0){
          filteredData=dataIn.map(a => {return {...a}})
        } else {
          for (const [groupKey, groupValue] of Object.entries(tags)) {//loop tag groups array
            if((tags[groupKey].filter(t => t.checked==true)).length){ // if anything is checked in a group...
              const checked = tags[groupKey].filter(t => t.checked==true);
              for (const [tagKey, tagValue] of Object.entries(checked)) {
                // flag the ones that have one of the checked things
                startingData.filter(i => i.tags.some(t => t.id==tagValue.id)).forEach((item, i) => {
                  item.hasActiveTag=true;
                  if (!item.activeTagCategories) {item.activeTagCategories=[]}
                  if (item.activeTagCategories.indexOf(groupKey)===-1){item.activeTagCategories.push(groupKey);}
                });
              }
            }
          }
          filteredData = startingData.filter(i => i.hasActiveTag===true && i.activeTagCategories.length===checkedCategories.length);
        }
        return filteredData;
      }

      function filterResourcesByKeyword(data, str){
        let filteredData = data.map(a => {return {...a}})
        filteredData = filteredData.filter(i => i.title.includes(str) || i.synopsis.includes(str));
        filteredData.forEach((item, i) => {
          item.synopsis = highlight(item.synopsis, str);
          item.title = highlight(item.title, str);
        });

        return filteredData;
      }

      function rePopulate(data){
        document.getElementById(listWrapperId).replaceChildren();
        renderItems(data);
      }

      function articlePage(id){
          fetch(`${strapiURL}/guides/${id}`).then(function (response) {
            return response.json();
          }).then(function (data) {

            var clone = articleTemplate.content.cloneNode(true);
            pageContainer.appendChild(clone);

            document.getElementById(articleBodyId).innerHTML = data.content

          }).catch(function (err) {
            // There was an error
            console.warn('Something went wrong getting guides.', err);
          });
      };

      function unload(){
        pageContainer.innerHTML="";
      };

      function navigate(url){
        unload();
        router.navigate(url);
      }

      function activeTags(checkboxes) {
        var checked = [];

        for (var i = 0; i < checkboxes.length; i++) {
          var checkbox = checkboxes[i];
          if (checkbox.checked) checked.push(checkbox.value);
        }

        return checked;
      }

      function process(value) {
        return value == undefined ? '' : value.replace(/[^a-z0-9_]+/gi, '-').replace(/^-|-$/g, '').toLowerCase();
      }

      function renderItems(data){
        let theCount = 0;

        for (const [key, value] of Object.entries(data)) {
          let increment = false;
          let URL;

          const listItem = listItemTemplate.content.cloneNode(true);

          if(value.URL){
            listItem.querySelector(".nsw-list-item__title a").href = value.URL
          } else {
            const name = process(value.title);
            const URL = `${pagePath}#/${value.id}/${name}`
            listItem.querySelector(".nsw-list-item__title a").href = URL;
            listItem.querySelector(".nsw-list-item__title a").dataset.internal = URL;
          }

          listItem.querySelector(".nsw-list-item__label").textContent = value.Author;
          listItem.querySelector(".nsw-list-item__title a").innerHTML = value.title;
          listItem.querySelector(".nsw-list-item__copy").innerHTML = value.synopsis;

          const tags = listItem.querySelector(".nsw-list-item__tags .nsw-list");

          value.tags.forEach(tagData => {
            var thisTag = document.createElement("div");
            thisTag.classList = "nsw-tag";
            thisTag.innerHTML = tagData.name
            tags.appendChild(thisTag);
          });

          document.getElementById(listWrapperId).appendChild(listItem);

          theCount++;

        }
        document.querySelector(".nsw-results-bar__info").innerHTML = `${theCount} results`;
        document.getElementById('mobile-show').innerHTML = `Show ${theCount} results`;
      }

      function renderTags(data, filtersContainer){
        for (const [key, tagTypes] of Object.entries(data)) {
          if(tagTypes.tags.length){
            const tagGroup = document.createElement("div");
            tagGroup.classList = "nsw-filters__item";
            tagGroup.innerHTML = `<p class="nsw-form__label nsw-m-bottom-sm">${tagTypes.name}</p>`;

            const tagCheckGroup = document.createElement("div");
            tagCheckGroup.classList = "nsw-list nsw-list--8";
            tagCheckGroup.id = `tag-group-${tagTypes.id}`;
            tagCheckGroup.dataset.taggroup = tagTypes.name;
            tagCheckGroup.dataset.id = tagTypes.id;
            tagGroup.append(tagCheckGroup);

            for (const [key, tags] of Object.entries(tagTypes.tags)) {
              if(tags.guides.length){
                const checkbox = document.createElement("div");
                checkbox.classList = "nsw-tag nsw-tag--checkbox";
                checkbox.innerHTML = `
                  <input type="checkbox" id="tag-${tags.id}" name="${tags.name}" value="tag-${tags.id}" data-id="${tags.id}" data-type="${tagTypes.name}">
                  <label for="tag-${tags.id}">${tags.name}</label>
                `;
                tagCheckGroup.append(checkbox);
                document.querySelector(filtersContainer).append(tagGroup);
              }
            }
          }
        }
      }

      function highlight(content,str) {
        var index = content.indexOf(str);
        if (index >= 0) {
        console.log(content,' contains ',str)
         content = content.substring(0,index) + "<span class='highlight'>" + content.substring(index,index+str.length) + "</span>" + content.substring(index + str.length);
        }
        return content;
      }
      </script>
