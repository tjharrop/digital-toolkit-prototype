---
layout: default.hbs
---

      <div id="contentContainer">
      </div>

        <template id="listing-page">
          <section class="nsw-section nsw-section--off-white nsw-p-top-lg nsw-p-bottom-lg">
            <div class="nsw-container">
              <h2>Methods</h2>
              <div class="nsw-layout">
                <div class="nsw-layout__main">
                  <p class="nsw-intro">A library of methods, playbooks, and templates organised by practice, type, and topic.</p>
                </div>
                <div class="nsw-layout__sidebar nsw-layout__sidebar--desktop"></div>
              </div>
            </div>
          </section>
          <div class="nsw-container">
            <div class="nsw-layout">
              <div class="nsw-layout__sidebar">
                <div class="nsw-filters nsw-filters--fixed js-filters">
                  <div class="nsw-filters__controls active">
                    <button>
                      <span class="material-icons nsw-material-icons" focusable="false" aria-hidden="true">tune</span>
                      <span>Filter results</span>
                    </button>
                  </div>
                  <div class="nsw-filters__wrapper">
                    <div class="nsw-filters__back">
                      <button class="nsw-icon-button nsw-icon-button--flex js-close-sub-nav" type="button" aria-expanded="true" aria-controls="sub-nav-">
                        <span class="material-icons nsw-material-icons" focusable="false" aria-hidden="true">keyboard_arrow_left</span>
                        <span id="mobile-show">Show results</span>
                      </button>
                    </div>
                    <div class="nsw-filters__title">Filter results</div>
                    <div class="nsw-filters__list">
                      <div class="nsw-filters__item">
                        <div class="nsw-form__input-group nsw-form__input-group--icon nsw-form__input-group--large">
                          <label class="sr-only" for="form-input-group-icon-1">Search</label>
                          <input class="nsw-form__input" type="text" id="filters-all-keyword" name="filters-all-keyword" value="">
                          <button class="nsw-button nsw-button--dark nsw-button--flex" id="keywordSubmit" type="button"><span class="material-icons nsw-material-icons nsw-text--light" focusable="false" aria-hidden="true">search</span></button>
                        </div>

                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <main class="nsw-layout__main">
                <div class="nsw-results-bar">
                  <div class="nsw-results-bar__info"></div>
                </div>
                <div class="nsw-search-results">
                  <div id="guides"></div>
                </div>
              </main>
            </div>
          </div>
        </template>
        <template id="content-page">
          <section class="nsw-section nsw-section--off-white nsw-p-top-lg nsw-p-bottom-lg">
            <div class="nsw-container">
              <div class="nsw-layout">
                <div class="nsw-layout__main" id="article-content">

                </div>
                <div class="nsw-layout__sidebar nsw-layout__sidebar--desktop">
                  {{>wiki-message}}
                </div>
              </div>
            </div>
          </section>
        </template>
        <template id="list-item">
          <div class="nsw-list-item">
            <div class="nsw-list-item__content">
              <div class="nsw-list-item__label"></div>
              <div class="nsw-list-item__title"><a href="#"></a></div>
              <div class="nsw-list-item__copy"></div>
              <div class="nsw-list-item__tags">
                <div class="nsw-list nsw-list--8">
                </div>
              </div>
            </div>
          </div>
        </template>

      <script>

      const pagePath = "/resources/";
      const router = new Navigo('/', { hash: true });

      window.addEventListener("load", () => {
        router.on("/:id/:name", (match) => {
          unload();
          articlePage(match.data.id);
          window.NSW.initSite()
        })

        .on('/', (match) => {
          unload();
          listingPage();
          window.NSW.initSite()
        })

        .on(pagePath, (match) => {
          unload();
          router.navigate('/');
        })

        .resolve();
      });

      const articleTemplate = document.getElementById('content-page');
      const listingTemplate = document.getElementById('listing-page');
      const listItemTemplate = document.getElementById('list-item');
      const pageContainer = document.getElementById("contentContainer");
      const articleBodyId = 'article-content';
      const tagQuerySelector = ".nsw-tag--checkbox input";
      const keywordsInputId = "filters-all-keyword";
      const listWrapperId = "guides";

      const strapiURL = 'https://nsw-design-system-guides.herokuapp.com';

      function listingPage() {
        let dataset;

        const clone = listingTemplate.content.cloneNode(true);
        pageContainer.appendChild(clone);

        const keywords = document.getElementById(keywordsInputId);

        if(keywords.value.length==0){
            var searchParams = new URLSearchParams(window.location.search);
            query = searchParams.get('q');
            keywords.value = query;
        }

        function rePopulate(){
          document.getElementById(listWrapperId).replaceChildren();
          populate();
        }

        function populate(searchStr){

          var theCount = 0;
          const selectedTags = document.querySelectorAll(`${tagQuerySelector}:checked`);

          for (const [key, value] of Object.entries(dataset)) {
            let increment = false;
            let URL;
            let checkedTags = activeTags(selectedTags);

            const listItem = listItemTemplate.content.cloneNode(true);

            if(value.URL){
              listItem.querySelector(".nsw-list-item__title a").href = value.URL
            } else {
              const name = process(value.title);
              const URL = `${pagePath}#/${value.id}/${name}`
              listItem.querySelector(".nsw-list-item__title a").href = URL;
              listItem.querySelector(".nsw-list-item__title a").dataset.internal = URL;
            }

            listItem.querySelector(".nsw-list-item__label").textContent = value.Author;
            listItem.querySelector(".nsw-list-item__title a").textContent = value.title;
            listItem.querySelector(".nsw-list-item__copy").textContent = value.synopsis;

            const tags = listItem.querySelector(".nsw-list-item__tags .nsw-list");

            let hide=false;

            value.tags.forEach(tagData => {
              var thisTag = document.createElement("div");
              thisTag.classList = "nsw-tag";
              thisTag.innerHTML = tagData.name
              tags.appendChild(thisTag);

              let siblingTags = document.querySelectorAll(`#tag-group-${tagData.tag_types[0].id} ${tagQuerySelector}`);
              // console.log(`${siblingTags.length} selected`); console.log(siblingTags);
              let checkedSiblingTags = activeTags(siblingTags);
              console.log(`checked ones: ${checkedSiblingTags}`)

              if (checkedSiblingTags.length==0) {
                  increment = true;
              } else if(checkedSiblingTags.includes(`tag-${tagData.id}`)){
                if(keywords.value.length=0 || listItem.textContent.toLowerCase().includes(keywords.value.toLowerCase())){
                  //document.getElementById(listWrapperId).appendChild(listItem);
                  increment = true;
                  if(checkedTags.includes(`tag-${tagData.id}`)){thisTag.classList.add("nsw-tag--filled")}
                }
              }
              if ((checkedSiblingTags.length>0) && checkedSiblingTags.includes(`tag-${tagData.id}`)){
                //increment = true; console.log('!!!!!!!!!!!!!! hide ' + value.title);
              }
            });

            if (increment && !hide){
              theCount++;
              document.getElementById(listWrapperId).appendChild(listItem);
            }

            document.querySelector(".nsw-results-bar__info").innerHTML = `${theCount} results`;
            document.getElementById('mobile-show').innerHTML = `Show ${theCount} results`;

          }
        }


        fetch(`${strapiURL}/tag-types`).then(function (response) {
          return response.json();
        }).then(function (data) {
          let tagPropPromise = new Promise(function(resolve, reject) {
            for (const [key, tagTypes] of Object.entries(data)) {
              if(tagTypes.tags.length){
                const tagGroup = document.createElement("div");
                tagGroup.classList = "nsw-filters__item";
                tagGroup.innerHTML = `<p class="nsw-form__label nsw-m-bottom-sm">${tagTypes.name}</p>`;
                const tagCheckGroup = document.createElement("div");
                tagCheckGroup.classList = "nsw-list nsw-list--8";
                tagCheckGroup.id = `tag-group-${tagTypes.id}`;
                tagGroup.append(tagCheckGroup);

                for (const [key, tags] of Object.entries(tagTypes.tags)) {
                  if(tags.guides.length){
                    const checkbox = document.createElement("div");
                    checkbox.classList = "nsw-tag nsw-tag--checkbox";
                    checkbox.innerHTML = `
                      <input type="checkbox" id="tag-${tags.id}" name="${tags.name}" value="tag-${tags.id}">
                      <label for="tag-${tags.id}">${tags.name}</label>
                    `;
                    tagCheckGroup.append(checkbox);
                    document.querySelector(".nsw-filters__list").append(tagGroup);
                  }
                }
              }
            }
            resolve(); // when successful
            reject();  // when error
          });

          tagPropPromise.then(
            function(value) {
              fetch(`${strapiURL}/guides`).then(function (response) {
                return response.json();
              }).then(function (data) {
                dataset = data;

                populate();

              }).catch(function (err) {
                // There was an error
                console.warn('Something went wrong getting guides.', err);
              });
            },
            function(error) { /* code if some error */ }
          )
        }).catch(function (err) {
          // There was an error
          console.warn('Something went wrong adding checkboxes.', err);
        });

        document.querySelector(".nsw-filters__list").addEventListener('click', function(e) {
        	if(e.target.nodeName == 'INPUT') {
            rePopulate()
        	}
        });

        // If it's a local link (identified by dataset.internal override browser behaviour)
        document.getElementById(listWrapperId).addEventListener('click', function(e) {
        	if(e.target.dataset.internal) {
            navigate(e.target.dataset.internal);
            return false;
        	}
        });

        document.getElementById('keywordSubmit').addEventListener('click', function(e) {
          rePopulate();
        });

        keywords.addEventListener('keypress', function(e) {
          if (e.key === 'Enter') {
            rePopulate();
          }
        });
      };

      function articlePage(id){
          fetch(`${strapiURL}/guides/${id}`).then(function (response) {
            return response.json();
          }).then(function (data) {

            var clone = articleTemplate.content.cloneNode(true);
            pageContainer.appendChild(clone);

            document.getElementById(articleBodyId).innerHTML = data.content

          }).catch(function (err) {
            // There was an error
            console.warn('Something went wrong getting guides.', err);
          });
      };

      function unload(){
        pageContainer.innerHTML="";
      };

      function navigate(url){
        unload();
        router.navigate(url);
      }

      function activeTags(checkboxes) {
        var checked = [];

        for (var i = 0; i < checkboxes.length; i++) {
          var checkbox = checkboxes[i];
          if (checkbox.checked) checked.push(checkbox.value);
        }

        return checked;
      }

      function process(value) {
        return value == undefined ? '' : value.replace(/[^a-z0-9_]+/gi, '-').replace(/^-|-$/g, '').toLowerCase();
      }


      </script>
